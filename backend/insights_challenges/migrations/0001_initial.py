# Generated by Django 4.2.23 on 2025-07-02 02:40

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("campaigns", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Challenge",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="The official title of the challenge.",
                        max_length=255,
                        unique=True,
                        verbose_name="Challenge Title",
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        help_text="A brief overview of what the challenge is about.",
                        verbose_name="Challenge Description",
                    ),
                ),
                (
                    "scenario_details",
                    models.TextField(
                        blank=True,
                        help_text="Narrative background or context for the challenge scenario.",
                        verbose_name="Scenario Details",
                    ),
                ),
                (
                    "objective_summary",
                    models.TextField(
                        help_text="A concise statement of the main goal for the student.",
                        verbose_name="Objective Summary",
                    ),
                ),
                (
                    "level",
                    models.CharField(
                        choices=[
                            ("Beginner", "Beginner"),
                            ("Intermediate", "Intermediate"),
                            ("Advanced", "Advanced"),
                        ],
                        default="Beginner",
                        help_text="The intended difficulty or experience level for this challenge.",
                        max_length=50,
                        verbose_name="Difficulty Level",
                    ),
                ),
                (
                    "product_context_asins",
                    models.JSONField(
                        blank=True,
                        default=list,
                        help_text="A list of ASINs that are central to this challenge, if any.",
                        verbose_name="Product Context ASINs",
                    ),
                ),
                (
                    "scenario_constraints_json",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Defines specific starting conditions or limitations for the challenge, e.g., {'initial_budget': 25, 'allowed_ad_types': ['SP']}.",
                        verbose_name="Scenario Constraints (JSON)",
                    ),
                ),
                (
                    "success_criteria",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Structured criteria defining challenge completion, e.g., {'metrics': [{'name': 'ACoS', 'target': 30, 'condition': 'le'}], 'time_limit_weeks': 4}.",
                        verbose_name="Success Criteria (JSON)",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Toggles whether this challenge is available for students to start.",
                        verbose_name="Is Challenge Active/Available",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Challenge",
                "verbose_name_plural": "Challenges",
                "ordering": ["level", "title"],
            },
        ),
        migrations.CreateModel(
            name="StudentChallengeProgress",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("not_started", "Not Started"),
                            ("active", "Active"),
                            ("completed_success", "Completed Successfully"),
                            (
                                "completed_failed_timeframe",
                                "Failed (Timeframe Exceeded)",
                            ),
                            ("completed_failed_metric", "Failed (Metric Not Met)"),
                        ],
                        default="active",
                        help_text="Current status of the student's challenge attempt.",
                        max_length=50,
                        verbose_name="Status",
                    ),
                ),
                (
                    "start_time",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Timestamp when the student started this challenge attempt.",
                        verbose_name="Challenge Start Time",
                    ),
                ),
                (
                    "completion_time",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the challenge attempt was concluded (success or failure).",
                        null=True,
                        verbose_name="Challenge Completion Time",
                    ),
                ),
                (
                    "progress_details",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Stores periodic snapshots of metrics or notes relevant to the challenge objectives, e.g., weekly performance summaries.",
                        verbose_name="Progress Details (JSON)",
                    ),
                ),
                (
                    "last_updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Timestamp when this progress record was last checked or updated.",
                    ),
                ),
                (
                    "challenge",
                    models.ForeignKey(
                        help_text="The challenge being attempted.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="student_attempts",
                        to="insights_challenges.challenge",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The student undertaking the challenge.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="challenge_attempts",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Student Challenge Progress",
                "verbose_name_plural": "Student Challenge Progresses",
                "ordering": ["user", "-start_time"],
            },
        ),
        migrations.CreateModel(
            name="CoachInsightsLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "simulated_week_start_date",
                    models.DateField(
                        help_text="The start date of the simulation week for which this insight was generated.",
                        verbose_name="Simulated Week Start Date",
                    ),
                ),
                (
                    "insight_type",
                    models.CharField(
                        choices=[
                            (
                                "budget_capping_scaling_opportunity",
                                "Budget Capping (Scaling Opportunity)",
                            ),
                            (
                                "budget_capping_poor_performance",
                                "Budget Capping (Poor Performance)",
                            ),
                            (
                                "high_spend_irrelevant_search_terms",
                                "High Spend on Irrelevant Search Terms",
                            ),
                            (
                                "underbidding_relevant_keywords",
                                "Underbidding for Relevant Keywords",
                            ),
                            (
                                "exact_match_opportunity_str",
                                "Exact Match Opportunity (STR)",
                            ),
                            (
                                "high_acos_general_inefficiency",
                                "High ACoS (General Inefficiency)",
                            ),
                            (
                                "low_cvr_relevant_traffic_listing_red_flag",
                                "Low CVR Despite Relevant Traffic (Listing Red Flag)",
                            ),
                            ("general_performance_tip", "General Performance Tip"),
                        ],
                        help_text="The specific type or category of the coaching insight.",
                        max_length=100,
                        verbose_name="Insight Type",
                    ),
                ),
                (
                    "generated_message",
                    models.TextField(
                        help_text="The actual advice/feedback message shown to the student.",
                        verbose_name="Generated Coaching Message",
                    ),
                ),
                (
                    "related_search_term_text",
                    models.CharField(
                        blank=True,
                        help_text="Search term this insight pertains to, if applicable (e.g., for STR insights).",
                        max_length=255,
                        null=True,
                        verbose_name="Related Search Term",
                    ),
                ),
                (
                    "is_read",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the student has viewed this insight.",
                        verbose_name="Is Read by Student",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        help_text="Timestamp when the insight was generated.",
                        verbose_name="Insight Generated At",
                    ),
                ),
                (
                    "related_ad_group",
                    models.ForeignKey(
                        blank=True,
                        help_text="Ad group this insight pertains to, if applicable.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insights",
                        to="campaigns.adgroup",
                    ),
                ),
                (
                    "related_campaign",
                    models.ForeignKey(
                        blank=True,
                        help_text="Campaign this insight pertains to, if applicable.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insights",
                        to="campaigns.campaign",
                    ),
                ),
                (
                    "related_keyword",
                    models.ForeignKey(
                        blank=True,
                        help_text="Keyword this insight pertains to, if applicable.",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="insights",
                        to="campaigns.keyword",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The student user who received this insight.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="coach_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Coach Insight Log",
                "verbose_name_plural": "Coach Insight Logs",
                "ordering": ["-created_at"],
            },
        ),
    ]
